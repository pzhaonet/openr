<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Open R</title>
    <link>https://openr.netlify.com/zh/blog/</link>
    <description>Recent content in Blogs on Open R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 05 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://openr.netlify.com/zh/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo univesal 主题的个性化设置</title>
      <link>https://openr.netlify.com/zh/blog/openr/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/openr/</guid>
      <description>&lt;p&gt;openr 网站用的是 blogdown 搭建，hugo 的 &lt;code&gt;devcows/hugo-universal-theme&lt;/code&gt; 主题。这个主题挺漂亮，功能强大，折腾的过程值得记录一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>纯文本编辑器的审阅模式</title>
      <link>https://openr.netlify.com/zh/blog/txt-review-mode/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/txt-review-mode/</guid>
      <description>&lt;p&gt;这里说的审阅模式，指的是像 Microsoft Office Word 里的 Review 模式，可以显示修订前后的不同。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>纯文本：文献管理的终极之道</title>
      <link>https://openr.netlify.com/zh/blog/literature-management/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/literature-management/</guid>
      <description>&lt;p&gt;​&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;凌厉刚猛，无坚不摧，弱冠前以之与河朔群雄争锋。&lt;/p&gt;

&lt;p&gt;紫薇软剑，三十岁以前所用。&lt;/p&gt;

&lt;p&gt;重剑无锋，大巧不工，四十岁以前持之横行天下。&lt;/p&gt;

&lt;p&gt;四十岁后，不滞于物，草木竹石均可为剑。自此精修，渐进于无剑胜有剑之境。&lt;/p&gt;

&lt;p&gt;——《神雕侠侣》&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>往 ppt 里插入 500 张图片的小伎俩</title>
      <link>https://openr.netlify.com/zh/blog/rstudio-ppt/</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/rstudio-ppt/</guid>
      <description>&lt;p&gt;今天要做个 ppt，内涵几十张照片，每页一张。
本来想手动，突然想起来，新版 RStudio 夹带了 新版 pandoc， 而 pandoc &amp;gt; 2.0.5， 可以用 markdown 做 ppt。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>&#39;rmd&#39; 包发布：一键安装、加载和探索 R markdown 全家桶</title>
      <link>https://openr.netlify.com/zh/blog/rmd/</link>
      <pubDate>Sat, 26 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/rmd/</guid>
      <description>&lt;p&gt;前一段时间在所里&lt;a href=&#34;http://www.pzhao.org/zh/post/r-course-slides/&#34;&gt;讲课&lt;/a&gt;，以为 R markdown 全家桶是 RStudio 默认安装的，结果发现 rticles，bookdown，citr 等居然是需要手动安装的，本来上课时间就紧张，搞得好狼狈。&lt;/p&gt;

&lt;p&gt;于是写了个小包，叫 rmd。主要功能有四个：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>&#39;rosr&#39; 包发布：开放科学与可重复性研究</title>
      <link>https://openr.netlify.com/zh/blog/rosr/</link>
      <pubDate>Sat, 26 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/rosr/</guid>
      <description>&lt;p&gt;又要从前一段时间讲的那门&lt;a href=&#34;http://www.pzhao.org/zh/post/r-course-slides/&#34;&gt;R 语言，开放科学与可重复性研究&lt;/a&gt;说起了。学生们在课上情绪高涨，认为学 R 的难度跟兴趣一样大，关键是对数据、代码、产品之间的协作关系不好把握。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>啥是佩奇党</title>
      <link>https://openr.netlify.com/zh/blog/pagedown/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/pagedown/</guid>
      <description>&lt;p&gt;最近，朋友圈被长广告《啥是佩奇》刷了屏。啥是佩奇，我不熟。我家的主流文化是小火车托马斯和海神之子波西·杰克森，坑已满，完全没有佩奇的位置。我只知道佩奇是一头动画小猪，她的形象我并不喜欢，原因是它完全无视透视原理，就像遭受过降维打击，据说是符合低龄儿童平面化的视角，而我家里的娃算是高龄儿童了，于是就没有引进。&lt;/p&gt;

&lt;p&gt;然而也不是全无兴趣。比如说，佩奇的原名是啥？一搜，是 Peppa Pig。那么，应该叫做“佩帕猪”，那么为啥翻译成“佩奇”？&lt;/p&gt;

&lt;p&gt;这个在网上也讨论过，“佩奇”其实是 Peppa 跟 piggy（小猪）的混合。这就有趣了，进入了我家的主流文化：关于童话角色的命名，我已经暗中观察了很久。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mindr 包的大一统：mm() 函数</title>
      <link>https://openr.netlify.com/zh/blog/mindr-mm/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/mindr-mm/</guid>
      <description>&lt;p&gt;&amp;lt;&lt;a href=&#34;http://www.pzhao.org/zh/post/r-with-markdown2/&#34;&gt;用 markdown 的逻辑写 R 脚本注释(2)&lt;/a&gt;&amp;gt;一文里配了张示意图，展示了 mindr 包的六个主要函数。当时我觉得，四海已定，天下太平。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/pzhaonet/mindr/raw/master/showcase/mindr_concept_1.1.8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;的确，思维导图、R 脚本、markdown 文件可以两两随意转换，我想要的基本功能都已经实现了。不过，mindr 用起来总是觉得……连我自己都觉得差那么点意思。差哪一点，一时又说不上来。&lt;/p&gt;

&lt;p&gt;趁圣诞节假期，我细想了一下，差的这一点，应该是用户体验了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pinyin 包升级：终于可以转换汉字向量了</title>
      <link>https://openr.netlify.com/zh/blog/pinyin-v.1.1.5/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/pinyin-v.1.1.5/</guid>
      <description>&lt;p&gt;在&amp;lt;&lt;a href=&#34;http://www.pzhao.org/zh/post/pinyin-one-year/&#34;&gt;外行 R 包开发手记：pinyin&lt;/a&gt;&amp;gt;里我写道：R pinyin 这么个小包，连五笔字型和四角号码都能转换了，“这回应该算是一劳永逸了吧。”然而仍然错估了形势。这不，在用户提问和提需求的压力下，pinyin 包又双叒叕升级了一次。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>课件：R 语言、开放科学和可重复性研究</title>
      <link>https://openr.netlify.com/zh/blog/r-course-slides/</link>
      <pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/r-course-slides/</guid>
      <description>“R 语言，开放科学和可重复性研究”的课件，xaringan 包制作。这个包做幻灯片果然是可以飞起的。
一周课程的内容，浓缩在 5 小时讲完了。当然有意外，主要是大家遇见的 LaTeX 的各种问题不一而足。当然有惊喜，mac 用户居然全都顺利过来了。
此外，原以为 rmarkdown 全家桶是 RStudio 默认安装的，结果发现 rticles 和 bookdown 等是需要手动安装的。我的 RStudio 已经升级好几次了，而那些包每次都在那里，所以……
所以上课前得弄个虚拟的干净系统，从零装一遍才知道会遇见什么问题。</description>
    </item>
    
    <item>
      <title>培训通知：R 语言、开放科学和可重复性研究</title>
      <link>https://openr.netlify.com/zh/blog/r-course-announcement/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/r-course-announcement/</guid>
      <description>本周我们系开了三天座谈会，好几位同事和同学对 R 语言感兴趣。经过一番简单准备，下周一和周二，我将在马普化学所举办一期培训班，题为“R 语言，开放科学和可重复性研究”。
下面是我用 drposter 包制作的小广告：
啊哦，还没学会怎么插入 iframe 时让海报适应高度……
那么直接点击链接看海报吧，效果好。
yihui 说得对，css 是个好东西，值得一学，而且比 LaTeX 容易。</description>
    </item>
    
    <item>
      <title>Xaringan 主题展示</title>
      <link>https://openr.netlify.com/zh/blog/xaringan-themes/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/xaringan-themes/</guid>
      <description>Xaringan 自带 16 套主题（themes），其中 10 套配有对应的 fonts.css，可惜光看名字是想象不出来模样的，挑选有困难。Xaringan 的 wiki 展示了几套漂亮的主题，但是不全。
我把每个主题都做了一个单独的幻灯片，以便选用，然而貌似 github 不支持嵌入幻灯片，而我又没有找到批量转成 gif 的办法。
于是就做了本网页。
我自己添加了个主题，叫 mpic，打算从 middlebury 出发慢慢修改，目前只改了个 logo。
感觉又进了一个坑。
chocolate
default
lucy
metropolis
middlebury
mpic
rladies
robot
rutgers
tamu
uo
duke-blue
hygge-duke
hygge
kunoichi
ninjutsu
shinobi
</description>
    </item>
    
    <item>
      <title>animate.css: Xaringan 动画转场</title>
      <link>https://openr.netlify.com/zh/blog/xaringan-animate-single/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/xaringan-animate-single/</guid>
      <description>Xaringan 的动画转场效果，可以用 animate.css 实现。只需在 yaml 里声明一下 animate.css 的路径，然后每张幻灯片开头声明一下 class 即可（或者用 layout 来批量控制连续若干片子的转场效果）。
下面是个完整的 Rmd 文件示例：
---title: &amp;quot;zoomOutUp&amp;quot;output:xaringan::moon_reader:css:- default- default-fonts- &amp;quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.0/animate.min.css&amp;quot;lib_dir: libs---layout: trueclass: inverse, center, middle, animated, zoomIn---# Yeah, Xaringan has animations...---# if animate.css!---layout: falseclass: inverse, left, center, middle# Click me and press the left or right arrow to see the zoomOutUp effect.</description>
    </item>
    
    <item>
      <title>mindr 幻灯片演示</title>
      <link>https://openr.netlify.com/zh/blog/mindr-slides/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/mindr-slides/</guid>
      <description>xaringan 做的幻灯片发布到网上的好处有很多，例如凡有网处皆可访问，例如每页幻灯片都有个固定网址方便引用等等。
发布到网上的方法有很多种，借此机会发布一下 mindr 包简介幻灯片，并简单做个笔记：
Github 法将 xaringan 制作的一个幻灯片的文件夹（简称幻灯片文件夹）作为一个 repo 发布到 GitHub，然后在该 repo 的settings 里开启 page 功能，就可以用 your_id.github.io/your_repo 来访问幻灯片了。
示例：https://pzhaonet.github.io/mindr-slides
参考：https://github.com/yihui/xaringan/wiki/Deploy-Slides-Online
Hugo + netlify 法如果你有个 Hugo 静态网站并由洋雷锋 netlify 托管（例如本站），那就可以将幻灯片文件夹直接放到 Hugo 网站的 static 文件夹里即可。netlify 自动部署后，访问 your_domain/your_xaringan 就行了。
示例：http://www.pzhao.org/slides/mindr
Dropbox + Updog 法这个我只是听说，没有亲手操作过。
参考：https://community.rstudio.com/t/posting-xaringan-presentation-on-blogdown/8212/7
用上面这些方法中的任意一个完成后，可以将幻灯片嵌入博客帖子里，如本文开头所示，方法是在 blogdown 的帖子里加入：
knitr::include_url(&amp;#39;hyperlink_to_your_slides&amp;#39;)参考：https://timmastny.rbind.io/blog/embed-slides-knitr-blogdown/
有种预感：三国群雄割据的局面快结束了，魏晋的风流时代即将来临……
</description>
    </item>
    
    <item>
      <title>用 markdown 的逻辑写 R 脚本注释（2）</title>
      <link>https://openr.netlify.com/zh/blog/r-with-markdown2/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/r-with-markdown2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.pzhao.org/zh/post/r-with-markdown/&#34;&gt;上回&lt;/a&gt;我抱怨没有现成的函数直接把 .R 脚本转换成 .Rmd 文档，于是自作聪明写了一个，结果很快 yihui 就留言说，有啊，&lt;code&gt;knitr::spin()&lt;/code&gt; 就可以。我就去研究了一下这个函数，发现比我写的那个要漂亮得多。&lt;/p&gt;

&lt;p&gt;我的心情很复杂。&lt;/p&gt;

&lt;p&gt;话说诗仙李白当年游山玩水，看见什么就写什么，留下的诗篇个个照耀千古。有一天，他来到了黄鹤楼，照例诗兴大发，正待提笔，突然看见了墙上有前辈崔颢题写的一首七律：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用 markdown 的逻辑写 R 脚本注释</title>
      <link>https://openr.netlify.com/zh/blog/r-with-markdown/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/r-with-markdown/</guid>
      <description>&lt;h2 id=&#34;九阳真经&#34;&gt;九阳真经&lt;/h2&gt;

&lt;p&gt;跟很多业余程序员一样，我意识到给代码写注释的重要性时，已经很晚了。有多晚？差不多就是隔一段时间再打开自己写的旧代码时。我惊讶得下巴都快掉了：这是我亲手写的吗？怎么一点都看不懂？这要是有人打假说我是抄袭，那恐怕连我自己都举双手赞成。&lt;/p&gt;

&lt;p&gt;代码里的注释很重要，读者是未来的自己。好的注释不仅能把事儿说清楚，还可以写得波澜壮阔，跌宕起伏。就像我在 《&lt;a href=&#34;https://xuer.pzhao.org&#34;&gt;学 R&lt;/a&gt;》一书里写的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果你乐意，那么完全可以在注释里偷偷写一部小说，就像《倚天屠龙记》里有人在《楞伽经》夹缝处写下《九阳真经》一样。&lt;/p&gt;

&lt;p&gt;--- 《学 R》第一章 “初见”&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>让人纠结的 ggplot2</title>
      <link>https://openr.netlify.com/zh/blog/ggplot2-problems/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/ggplot2-problems/</guid>
      <description>&lt;p&gt;R 语言的 ggplot2 包很美很酷。比如，基于 ggplot2 做出的配对儿图是这样的：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 R 语言相关论坛求助</title>
      <link>https://openr.netlify.com/zh/blog/how-to-call-for-help/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/how-to-call-for-help/</guid>
      <description>&lt;p&gt;求助！求助！十万火急！&lt;/p&gt;

&lt;p&gt;在 R 语言相关论坛发布求助帖之后，是不是急着等人响应？可惜惊叹号没啥用。如果按以下格式发帖，效果会胜过十万个惊叹号。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>外行 R 包开发手记：mindr</title>
      <link>https://openr.netlify.com/zh/blog/mindr-one-year/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/mindr-one-year/</guid>
      <description>&lt;p&gt;在 CRAN 发布的几个包里， 我对 mindr 情有独钟。它像 pinyin 包一样，结构简单清晰。它得到的用户反馈不像 bookdownplus 包那样让我手足无措。相反，在跟用户的互动中，mindr 在成长，越来越酷。开发升级 mindr，是个很愉快的过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>外行 R 包开发手记：pinyin</title>
      <link>https://openr.netlify.com/zh/blog/pinyin-one-year/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/pinyin-one-year/</guid>
      <description>&lt;p&gt;玩 bookdown 直接催生了两个包的诞生。上一篇说了  bookdownplus， 这回说说 pinyin。&lt;/p&gt;

&lt;p&gt;时隔一年多，我再回头去看 pinyin 这个包，就跟回顾 bookdownplus 是类似的：这玩意儿也算个包？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>外行 R 包开发手记：bookdownplus</title>
      <link>https://openr.netlify.com/zh/blog/bookdownplus-one-year/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/bookdownplus-one-year/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;春有百花秋有月，夏有凉风冬有雪 。&lt;/p&gt;

&lt;p&gt;若无闲事挂心头，便是人间好时节。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pzhao.org/zh/post/shadowed-images/&#34;&gt;上回&lt;/a&gt;提了一句，说被自己开发的 bookdownplus 包给坑了。受它和其他几个 R 包所累，这一年来，我总想关起门窗，静静清除包包里的几只 bugs，不清掉的话实在睡不香。于是乎，把阿尔卑斯山的春花秋月全都错过了。&lt;/p&gt;

&lt;p&gt;简单来说，被坑的原因只有一个：没有金刚钻，硬揽瓷器活。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>给 Hugo 网站的插图添加阴影</title>
      <link>https://openr.netlify.com/zh/blog/shadowed-images/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/shadowed-images/</guid>
      <description>&lt;p&gt;最近一年多，有个东西一直困扰着我，就像半夜酣睡时飞来一只蚊子，时不时在耳朵边哼哼几声，很烦。挥手赶走它继续睡，过一会儿又过来哼哼。好几次我犹豫着要不要爬起来彻底消灭它，想着想着就又睡着了，于是就一直凑合。&lt;/p&gt;

&lt;p&gt;这只蚊子就是我自己开发的 bookdownplus 包。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R bookdown 用户的狂欢节：首届 bookdown 大奖赛</title>
      <link>https://openr.netlify.com/zh/blog/bookdown-contest/</link>
      <pubDate>Fri, 07 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/bookdown-contest/</guid>
      <description>&lt;p&gt;这是令我感到非常困惑的一件事情：首届 bookdown 大奖赛已经开赛一个多月了，距离截止日期还剩三周，奖品超级丰厚，可是参赛的稿件只有寥寥十篇。目前看来，只要参加就有奖！奖品价值 150 元到 3000 元不等！&lt;/p&gt;

&lt;p&gt;不知道人们还在等个啥……&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>当 github 的项目做了可视化，我感觉像是上帝在创世纪</title>
      <link>https://openr.netlify.com/zh/blog/gource/</link>
      <pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/gource/</guid>
      <description>&lt;p&gt;用 blogdown 制作和维护本博客已经一年有余。昨天，我把本网站的发展过程做了一个 5 分钟的视频，从开始到现在。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>独狼死，群狼活：R 语言女子学习小组 &amp; 书友之窗</title>
      <link>https://openr.netlify.com/zh/blog/xuer-girls/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/xuer-girls/</guid>
      <description>&lt;p&gt;文科女生 @dancingapple 买了《学 R》这本书，&lt;a href=&#34;http://xuer.dapengde.com/post/dancingapple/&#34;&gt;郑重宣告&lt;/a&gt;开始学习 R 语言。这个圈子里，据我所知，买了这书的还有：&lt;/p&gt;

&lt;p&gt;@tvb, @nostalgic1212, @veronicazhu, @hqy...&lt;/p&gt;

&lt;p&gt;都是女生！&lt;/p&gt;

&lt;p&gt;感慨之余，我做了个文案：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>答《学 R》读者</title>
      <link>https://openr.netlify.com/zh/blog/xuer-faq/</link>
      <pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/xuer-faq/</guid>
      <description>&lt;p&gt;我主笔的《&lt;a href=&#34;http://xuer.pzhao.net/&#34;&gt;学 R&lt;/a&gt;》一书正在热销。有些朋友问了一些问题，我在此一并作答。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我主笔的《学 R：零基础学习 R 语言》一书已面世</title>
      <link>https://openr.netlify.com/zh/blog/xuer-sale/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/xuer-sale/</guid>
      <description>&lt;p&gt;书终于印好面世了。感谢北大的朱彤教授和 RStudio 公司的谢益辉博士慷慨作序。据我所知，这应该是国内第一本用 R bookdown 包来写作和排版的书。书的主页是 &lt;a href=&#34;http://xuer.pzhao.net&#34;&gt;http://xuer.pzhao.net&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何妥当地复制或同步文件</title>
      <link>https://openr.netlify.com/zh/blog/sync/</link>
      <pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/sync/</guid>
      <description>事情的起因是这样的：有人在群里问了个技术问题：从 Ubuntu 操作系统的电脑里，往另一台电脑里拷贝或同步一批文件，该如何操作？
虽然问题是针对 Ubuntu，但我们的解决方案对 Windows 和 Mac 用户也是大有用处的。
最方便的是网盘。
首选 Dropbox， 人送外号“丢丢盒”，是全人类网盘里的带头大哥，跨平台免费。只需在两台电脑上都安装 Dropbox，设置好同步文件夹，那么，往里丢就是了。电脑 A 里的指定文件夹的任何改动，都会实时同步到电脑 B。
Dropbox 提供免费的 2.5G 空间。邀请朋友可以最多得到大约 20G 的奖励。为了不骚扰朋友，我通过邀请自己的小号而达到了扩容的目的。20+G，足够，这些年来用起来毫无压力。
Dropbox 最让我称道的地方是历史版本功能。我经常在编辑文档时手贱，按下了 ctrl+s 并且关闭了文档又后悔。去 Dropbox 的网页上找旧版本文件就行了，这个功能救了我无数次。
带头大哥这么好，可惜，他在大陆被墙了。
一个替代方案是 Google Drive，免费 15 G 空间。这货最近改名叫 Backup and Sync 了，新名字令人发指。功能上不如 Dropbox，配合用一下也不错。
可惜，Google Drive 好像也被墙了。
那就腾讯微云或百度网盘（这个名字同样令人发指）吧，我不常用，不评价。好歹是个网盘吧。
如果文件少，而且是一次性的，那就 email 也行。
但是新的问题来了：如果用网盘或 email，那么文件势必经过中央服务器。如果是隐私文件，你不想在腾讯服务器上留一份吧？
嗯，有时候留一份也无妨，加密就行了，例如使用加密邮箱 protonmail。
如果文件多，邮箱不方便呢？
那么可以用点对点的同步工具，例如 resilio sync。
resilio sync 也是免费跨平台软件。手机、电脑等各个设备上安装一下，设置好各自的同步文件夹，那么只要设备连上网，就自动同步了，不经过中央服务器。
但是新的问题来了： resilio sync 不是开源的；他们说没经过中央服务器，你信么？
不信的话，可以用替代方案：syncthing。这是我此次微信聊天的最大收获。感谢提供这条方案的朋友。
syncthing 也是 P2P 同步工具，而且是开源的。这意味着，全世界的程序员都可以去检查它到底有没有往某个中央服务器传文件。如果发现有，就会被无情揭露，然后被搞死。目前它还活着，说明是安全的，真正的去中心化。
据说 Linux 里还有个 rsync 命令。rsync 的意思是 remote sync。这货没有图形界面，是黑底白字的命令行，我看见命令行就吓得哆嗦，所以就不去试用了。</description>
    </item>
    
    <item>
      <title>Windows 的又一个坑：R writeLines() 函数的换行符</title>
      <link>https://openr.netlify.com/zh/blog/r-writelines-line-break/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/r-writelines-line-break/</guid>
      <description>昨天，又被 Windows 坑到了。
事情的背景是，我的工作环境是 Windows 操作系统。由于一些众所周知的原因，有些事情在 Linux 下做起来比较顺当。于是，我就用 virtualbox 装了个虚拟的 Ubuntu。由于不熟，只用到其中很小一部分功能，所以，凡是能在 Windows 下做的事情，我绝不去 Ubuntu。
昨天，我要写一批 bash 批处理文件，打算在 Ubuntu 里运行。这批 .sh 文件结构格式相同，只是内容略有不同。于是，我就动了点小心思，用 R 语言批量写好了文件内容，最后用 writeLines() 函数生成了这批 .sh 文件。
前面我提到了，这些操作都是在 windows 下完成了。保险起见，我特地指定了 writeLines(useBytes = TRUE)，来保证这批 .sh 文件的编码 UTF-8，心想这下应该没问题了吧。
但是，在 Ubuntu 里执行 这批 .sh 文件，居然出错！说什么文件找不到……
为了简化问题，我把从这批运行失败的 .sh 文件里面随便拎出一个，里面删得只剩两条指令：
cd ~ls然后另存为 test.sh 文件，用来测试。运行 test.sh，结果：
这么两条命令，居然还有错？
我记得在 Ubuntu 下直接写的 .sh 文件没这个问题啊。
那好，我就在 ubuntu 的文本编辑器里写了一个一模一样的文件，取名 test2.sh，内容也是只有这两条指令。然后运行，居然好了！
肉眼去看，两个文件都完全相同！我对比了一下两个文件的编码，都是 UTF-8。
这是遇见孙悟空和六耳猕猴了？
我祭出两面照妖镜：一个是 Totalcommander 的文本比较工具，一个是 notepad++ 的文本比较插件。比较的结果是，两个文件完全相同！</description>
    </item>
    
    <item>
      <title>我把青春献给你：排版 (4)</title>
      <link>https://openr.netlify.com/zh/blog/latex-and-me-4/</link>
      <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/latex-and-me-4/</guid>
      <description>9
bookdown 或者说 Pandoc 的伟大之处，就是把原先必须在 LaTeX 里做的事情，99.9% 都可以用 markdown 语法完成。剩下的 0.1%，例如公式、索引、控制换行、临时改变字体字号、强制分页等操作，所涉及的 LaTeX 命令都很简单（$$, \index{}、\mbox{}、\small、\newpage），偶尔用一下无伤大雅。只需找个漂亮的编辑器，在 bookdown 下写作就有不错的体验，而生成的 pdf 文档处处透露着 LaTeX 的优雅。平时自用一下，美得不行，仿佛梅开二度，枯木逢春。我为 bookdown 量身制作了 bookdownplus，pinyin 和 mindr 几个扩展包，沉浸在美妙之中不可自拔。
但是，直到这次真正给《学 R》排版，真正要送到印刷厂印个几千本的时候，光有 bookdown 的现成模板就不够用了。《学 R》是本中文书，LaTeX 对中文的支持先天不足，很多细小的问题，得自己一个一个抠。
比如中文里夹杂的英文词的中断换行（hyphenation），总是在不该断的地方瞎断。找不到完美的解决方案，最后我手动添加了 \mbox{} 凑合。
比如段首空两格。我明明记得原先是自动空两格的，不知哪一次升级以后，这个设置就不见了。好在这个不难解决。
比如脚注和上标。bookdown 里^[]表示脚注，两个^之间表示上标。问题是两个脚注连在一起怎么办？要是写成杨过^[]和小龙女^[]，那两个^之间的文字就变成了上标。我试来试去，最简单的就是在中间偷偷摸摸塞进去个空格，把上标结构破坏掉。想来英文不存在这个问题，到处都是空格。
10
所幸，我算是挺过来了。最后排出的文档，虽然不是尽善尽美，但已经达到了我能力的天花板。想要更多也没有了。
只是年轻的时候我从没想过，将来自己会跟排版这件事纠缠。那些投进去的时间和精力，花在别处，会不会更好？无论本职工作，还是业余爱好，我都不是干排版的啊。
可是，怪就怪在，排版里这些一个一个的坑，你不去亲自填，就没人给你填。就像自己的娃，打扮成啥样，全在爹妈。自己的书，正式的出版物，难看的排版，你能忍吗？诸葛亮是怎么死的？事无巨细事必躬亲累死的。可是难道诸葛亮自己想被累死吗？
回头看看来时的路，我把青春的尾巴献给了 R，LaTeX，Linux。Linux 已然渐行渐远，LaTeX 曾经聚聚散散，只有 R 自始至终在我身边，成为了长久的陪伴。而这次，LaTeX 想甩也甩不掉了，她借着 bookdown 这匹木马，藏在了 R 的深处，彻底把我攻陷。
用 LaTex 排出的《学 R》这本书，就当是青春的纪念。</description>
    </item>
    
    <item>
      <title>我把青春献给你：排版 (3)</title>
      <link>https://openr.netlify.com/zh/blog/latex-and-me-3/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/latex-and-me-3/</guid>
      <description>7
LaTeX 做出来的文档，确实漂亮。这种漂亮不是那种一眼就能看出哪儿漂亮的漂亮，而是一种说不出来的气质。这种气质来自字体、间距、断字等等诸多细节的堆积和交互作用。只要是用过 LaTeX 的人，拿来个文档用鼻子一闻，就知道是 Word 做的还是 LaTeX 做的。就好像你遇到了你的另一半，让你神魂颠倒，可就是说不出她究竟好在哪里; 她走在人群里，你一眼就能找到她。因为你眼里没别人。
然而，这种气质不是能轻易把握的。LaTeX 最为奇特的是，你为她投入了无数的时间，却竟然说不清楚到底是因为她太好还是她太糟。如果她太好，为何这么难用？如果她太糟，为何你甘心为她付出？
之所以能用 LaTeX 写完博士论文，我想来想去，这个奇迹是以下四点一起促成的：
组里的同事提供了现成的论文模板，
身边有同事可以随时问，
老板只看结果，对我实现的手段并不介意，
论文是英文写的，不需要跟中文排版死磕。
想学 LaTeX 的注意了！以上四点，只要缺了一样，那么学 LaTeX 的阻力就会提高一个数量级。此坑慎入！
如果有了这四个条件，那么基本上就不用额外操心，只管埋头写论文就是了。
然而，LaTeX 下埋头写作的体验并不美好。那感觉根本就不是写论文，而是写代码。不编译出来，你根本不知道自己写了几页，每页是啥模样。一天下来，脑袋胀胀的，心里乱乱的。相比之下，用 Word 写论文，每敲一个字符都有一点成就感，敲完一页后，就像已经出版了一样心满意足。
LaTeX 就像个绝世美人，不时让你为她的美貌倾倒。更大的诱惑是，你心里清楚，只要你努力，就能距离她的美貌更接近一点。于是，你就身不由己地投入大把大把的精力，把你的文档弄得越来越漂亮，虽然每次只是漂亮了那么一点点。
不像 Word，你知道，无论再怎么使劲，做出来的论文顶多也就那样了，不可能更美，所以心态反而平静下来，老老实实过日子。
一个像恋爱，一个像婚姻。
8
当完成博士论文的时候，我决定结束天天心惊胆战的 LaTeX 爱情长跑，回到 Word 的温柔乡。我把城墙修高加厚，厚得就像特洛伊城，把 LaTeX 拦住墙外，从此一刀两断。曾经在同一个战壕里的战友，变成了洪水猛兽。
到了新工作单位，观察了一下，老板和同事全部是正常人，不是 X-men。我松了一口气。
有一次，有个名叫 LyX 的使者来敲我的城门。从三个字母参差不齐的模样，我一眼就识破了他的伪装，知道是 LaTeX 派来的奸细，于是我轻轻吐出一个字：滚。
我以为，从此就跟 LaTeX 形同陌路了。
有一天，我在使用 R 语言的时候，神使鬼差地装上了一个名叫 bookdown 的扩展包。
很久以后，再次回忆那一刻，仍然不由得感慨万千。命中注定的事，逃不掉的劫数。
bookdown，就是攻陷特洛伊的木马; 里面藏着的，除了我的旧爱 LaTeX，还有 Pandoc 这个魔鬼。后者从名字上一看，就知道是潘多拉放出来的。
安装 bookdown 的那一瞬间，我把木马轰隆隆地拉进了我的城，而我却浑然不知。</description>
    </item>
    
    <item>
      <title>R bookdownplus 升级手记，以及北大论文模板</title>
      <link>https://openr.netlify.com/zh/blog/bookdownplus-update/</link>
      <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/bookdownplus-update/</guid>
      <description>bookdownplus 这个 R 语言程序包，自用起来感觉不错，当初发布的时候还小得意了一把。时过境迁，现在回头看起来是越来越不满意。CRAN 上，bookdownplus 的总下载量接近三千（与此相比，bookdown 的总下载量是七万），大约每小时就有一次下载。Google ‘bookdownplus’ 可以搜到 已经有中文用户在写使用体验了。越是这样，我越惶恐，因为我知道，这个包写得粗糙，可改进的地方数都数不过来。
向我反馈问题的用户超出了预期，主要是兼容性的问题：在 macOS上如何，在 Linux 上如何，这些问题我都没有办法回答，因为我只在 Windows 7 上测试了，其他操作系统既无精力也无条件测试。开发个软件，自用是一回事，让别人能用完全是另外一回事，这两回事之间真是相差了一个筋斗云。
所以我决定先把自己看不过去的问题解决一下，那就是代码的构架问题。
bookdownplus v.1.3 以后的版本包含了 20 个模板。写这个包的时候，因为懒，我就把所有模板的 .tex 文件混到一个文件夹里，style 和 cls 文件混在另一文件夹里，到最后自己都搞不清楚哪个模板用哪个文件了。用户每次想运行 bookdownplus() 生成一个新文档时，都把所有有用没用的文件一股脑考进来（反正也不大），连我自己都看不下去了。此外，我还指望着别人贡献一些新模板，可是目前乱糟糟的，谁愿意把好东西往垃圾堆里扔呢？
于是这两天我花了一个上午，把这些文件重新整理归类，让他们各回各家各找各妈，每个 bookdown 模板都对应一个 zip 压缩文件，扔在 bookdownplus 的安装目录里。而且，如果再开发新 bookdown 模板，只需按照现有模板 zip 文件里的结构，将所需文件压缩并甩进 bookdownplus 安装目录，就可以用 bookdownplus() 直接调用了，连升级都不用。
虽然功能上没有多大增强，但架构上舒服多了，所以我把版本号从1.3.x 升到了 1.4.0。
我还有一块心病，是北京大学学位论文的 LaTeX 模板，我迟迟没能转成 bookdown 模板。原因是这个 LaTeX 模板本身在我电脑上就编译不成功。这次不知怎么开了窍，突然被我搞定了，作为第 21 个模板，收进了 bookdownplus v.1.4.0 里。
此外，新增了一下几个模板：
益辉制作了 Chapman &amp;amp; Hall 出版社的模板，现成的，我稍微改了一下。看上去是这样的：这提醒我，直接去 bookdown.</description>
    </item>
    
    <item>
      <title>全面迁站：从 Wordpress 到 Hugo</title>
      <link>https://openr.netlify.com/zh/blog/migrated-to-hugo/</link>
      <pubDate>Sat, 25 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/migrated-to-hugo/</guid>
      <description>&lt;p&gt;从今天起，我的旧博客 dapengde.com 停止更新。旧博客的全部帖子已经搬到了 &lt;a href=&#34;http://www.pzhao.org&#34;&gt;pzhao.org&lt;/a&gt;，欢迎收藏（ctrl + d）和&lt;a href=&#34;http://www.pzhao.org/zh/index.xml&#34;&gt;订阅&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我把青春献给你：排版 (2)</title>
      <link>https://openr.netlify.com/zh/blog/latex-and-me-2/</link>
      <pubDate>Wed, 22 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/latex-and-me-2/</guid>
      <description>5
如果上一篇帖子让你以为我在为 \(\LaTeX\) 做广告，呵呵，那你就上当了。为啥？
因为我早就抛弃 LaTeX 了。
几年前，把用 LaTeX 排版排得漂漂亮亮的博士论文提交的那一刻，我咬牙切齿地想：老子终于可以跟 LaTeX 这个怪物永别了。
想不起来第一次是从哪里知道 LaTeX 的。好像是从 Linux 的学习里，得知 LaTeX 是科研圈常用的写作工具。作为一个混科研圈的工具控，我居然没听说过？而且身边全是搞科研的，居然没人用过？怪哉怪哉。
于是，我就去问见多识广的朋友：“你用过 LaTeX 吗？”
朋友正穿着白大褂，在中科院化学所的有机实验室忙活，一听我的问题，痛痛快快地回答：
latex 啊？用过用过，我们经常从美国买。你要做什么？要多少克？1
我愣了，赶紧说：
不急不急。你先忙，我需要的时候找你买。
这就是我初学 LaTeX 时的生态。圈里没人懂，身边没人带，全凭好奇和兴趣。作为一个寻常百姓，学起来的难度可想而知。
当时虽然已经奔三的年岁，但血气犹存;还没当爹，手头还有一点闲置光阴。于是，磕磕碰碰，我终于用 LaTeX 把工作总结做了个 beamer 幻灯片，准备在单位作报告时用。花了这么多时间，如果不好用，那还学个啥劲呢？所以，要不要继续学，在此一举。
就在这关键时刻，单位领导一句话，把我仅有的热情抛进了万丈深渊。领导说：
工作总结的 ppt 你不是说你做完了？发给我来修改。
6
LaTeX 在我这里真正派上用武之地，是来德国读博士的时候。
刚到这个研究组，我就大吃一惊：组里清一色的 Linux 操作系统，大家拿 LaTeX 写各种文档，用 R 语言处理数据。
Linux，LaTeX，R，这是耗尽我青春尾巴的三大怪物。此外还有个 vim，但是跟这仨货比起来，属于小巫见大巫。
Linux 和 R 的血泪史按下不表，今天只说 LaTeX。
当时我无奈地想，嫁鸡随鸡嫁狗随狗，就跟着这帮 X-men 一起混吧。
很快，我又大吃一惊：在这个变种人小组里，牵头的老板，居然是个正常人，用的是 Windows 系统，Word 写文档，Excel 处理数据。话说一个正常老板跟一群变种人下属之间是怎么交流的？</description>
    </item>
    
    <item>
      <title>我把青春献给你：排版 (1)</title>
      <link>https://openr.netlify.com/zh/blog/latex-and-me-1/</link>
      <pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/latex-and-me-1/</guid>
      <description>1
2017 年快要过去了。如果剩下这四十天不出什么幺蛾子的话，我今年的最蠢事情排行榜，基本是板上钉钉。名列榜首的，就是过早给《学 R》一书大肆宣传。跟罗永浩当年头一回卖锤子手机一样一样的，还没量产，就先吹牛，结果吹破了，打了自己的脸。
其实，这本书早在今年 6 月就写完了，7 月做了最后一次修改。当时书号已经批了，封面也有了模样，我以为马上就能印出来了，于是告诉了我能告诉的每一个朋友。朋友们都很讲义气，把白花花的银子拍在桌上，就等着付钱买了。当了教授的老同学说：放心，到时候我送给我的学生人手一本！
谁知道，一晃四个多月过去了，书还没出来。我的前期宣传算是白费了。让人欣慰的是，直到现在，仍然有铁杆粉丝惦记着我，时不时发来鼓励的短信：“喂，你那书烂尾了吧？啊哈哈哈哈~~~~”
谢谢。
那么，四个月里，这书干嘛去了？
在排版。
《学 R》这本书，一直排不出理想的模样。
四个月是在反反复复修改排版里度过的。一直拖到上周，我们仍然看不到任何排版成功的迹象。2017 年所剩无几的耐心消耗殆尽，一咬牙一跺脚，我们决定壮士断腕。合作作者 Y 从出版社讨来排版文件，并且自己花钱购买了专业软件，自己排；我同时用 \(\LaTeX\) 排，齐头并进。谁先排好就用谁的。我们谁都不想再拖，再拖就真的要吐血了。
当做出这个决定的第二天，Y 看到我用 \(\LaTeX\) 做出的 pdf 书稿小样得到了印刷厂的认可，就放下了手里的专业软件，决定不干了：“\(\LaTeX\) 真厉害，有空我学一下……”
我立马拦住：“最好别去学。这个坑太大。一入 \(\LaTeX\)，坑深似海。”
2
出版社负责录入和排版的工作，简称“录排”。
这四个月来，录排可谓兢兢业业，全心全力为《学 R》排版。可惜，辛苦不一定有回报，排出的书稿，一直有层出不穷的问题。
比如说，丢失公式和特殊字符。原稿里的诸如 R2， \(\pi\) 等都莫名其妙消失了。
比如说，字体。原稿里的代码都是用等宽字体表示的，录排之后都成了跟正文一样的字体。
比如说，标点符号。原稿里的所有标点符号，包括代码里的逗号、引号、括号、冒号，都变成了中文标点符号。加上非等宽字体，书里的代码惨不忍睹。
最要命的是，原稿里的很多空格也都不翼而飞。比如录排稿：
是不是一头雾水？实际上原稿是：
每次从录排稿里挑问题，都恨不得把一双近视眼珠子抠出来，再拿着放大镜逐字逐句看。后来，索性放弃了很多想法。比如说，原先代码是彩色的，得知需要录排逐个字符手动修改，算了不要了；原先打算增加个小贴士目录，得知需要排完页码手动添加，算了不要了；原先打算给常用函数做个索引，方便读者从书里找示例，看样子也得手动做，算了不要了……
即便如此，每次的排版仍然会出现奇奇怪怪的问题。如此往返三次，《学 R》这本书我已经读得想呕吐了。
我百思不得其解：这到底是怎么回事？
3
来回折磨了四个月。终于， Y 试用了一下录排用的排版软件—— Adobe InDesign，俗称 ID，是国内出版业主流的专业排版软件。
Y 立刻对我说：“我明白问题出在哪里了！”
原来，录排是把我们提交的原稿，转成了 txt 文本文件；书里的插图，全部转成了 tif 图片。然后，把这些素材导入 ID，然后手动按照原稿 pdf 的样子做调整。
这正是录排一贯的工作流程。
这个流程，对文学类书籍没有问题。一篇小说，重要的是内容，不是格式；只要把文字分好段，就不会有大错。
然而，这个流程用在《学 R》 这本书上，就是个灾难。因为这本书，内容和格式，都很重要。
然而，这一点，录排不知道。
然而，我们不知道录排不知道。</description>
    </item>
    
    <item>
      <title>Build a mirror/backup site for your own steem posts in 30 minutes - 30 分钟搭建自己的 steem 镜像备份网站</title>
      <link>https://openr.netlify.com/zh/blog/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem/</link>
      <pubDate>Mon, 06 Nov 2017 09:44:42 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem/</guid>
      <description>&lt;p&gt;Yesterday, I built two mirror sites for my steem posts (&lt;a href=&#34;https://dapeng.netlify.com/&#34;&gt;mirror 1&lt;/a&gt;，&lt;a href=&#34;https://steemit.netlify.com/&#34;&gt;mirror 2&lt;/a&gt;) as backups, which are synced automatically everyday, thanks to steemsql and steemdata. The mirror sites are very useful:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R bookdown 的小技巧</title>
      <link>https://openr.netlify.com/zh/blog/bookdown-tips/</link>
      <pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/bookdown-tips/</guid>
      <description>本帖用来收集整理 R 语言 bookdown 扩展包的一些使用技巧。有些是在网上搜来的，有些是我在别处讨论得来的，有些是我尚未发布的，都写在这里备用。
输出 Markdown 文件使用 bookdown 编译 Rmd 文件，可以得到的输出格式五花八门。对此，bookdown 的官方文档 有详细介绍，包括 github， pdf，epub，word，html 单个文档等，偏偏没有提 markdown 格式。
其实，markdown 文件是有的，在编译过程里作为过渡文档存在，编译结束后自动删除。编译顺利的时候，在文件夹里“刷”地闪一下就消失了。我以前的做法是“快手”，在它消失之前迅速用 notepad++ 打开，就存下来了。这显然不是办法，凑合着过日子而已。
一般来说，如果仅仅是使用 rmarkdown，只需在 yaml 设置里声明一下：
output:md_document:variant: markdown_github然后 knit 一下，就可以得到 markdown 文件了。想当然地，我把这段代码加到了 bookdown 的yaml 里，却得到警告，说 bookdown 不支持。
这事儿被我搁置了很久，最后我终于在 bookdown 的项目主页找到了答案：参数 clean = FALSE 。
bookdown::render_book(&#39;index.Rmd&#39;, clean = FALSE)
我很喜欢 markdown 格式。我用 bookdown 写论文，Rmd 的正文里插了不少诸如 r pi 这样的调用。跟合作作者讨论时，看 Rmd 文件吧不直观，看 html 吧不方便修改，md 大概是最好的格式。
bookdown 的编译，我习惯按快捷键 ctrl+alt+b，或者点击右上方面板的 Build 按钮编译的，输出格式取决于 yaml。这样就得不到 md 文件。要想得到 md 文件，看来以后得改成命令行编译了。</description>
    </item>
    
    <item>
      <title>如何在 R markdown 里输出 r pi 并前后加上小撇`</title>
      <link>https://openr.netlify.com/zh/blog/backticks-in-rmd/</link>
      <pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/backticks-in-rmd/</guid>
      <description>其实本文的标题应该是：如何在文章里显示 `r pi` 这样的文字。但是我不知道怎么把这个格式弄到标题里。所以，就这样凑合过吧。
这个问题的答案，要分几层意思来说。`r pi` 是代码格式（本博客显示为粉底红字），并且包含的`符号同样是代码格式，并且 pi 并没有被编译成 3.1415927。别看它短，这三点每个都是个坑。
这个问题在编写 R markdown 教程时常见。其实，等你明白这个问题的答案后，会发现答案并不难，难的是如何描述这个问题。我费了好大劲，都想不出一个准确描述的办法，并且在那些支持 markdown 的论坛上，我连这个小撇都输不出来，这叫人怎么问？最后我只能这么提问：
请问在输出文档里怎么显示’撇 r pi 撇’并且别让它编译出来 3.1415927？
第 1 层意思，那个小撇 `，它到底叫什么？总不能总叫“小撇”吧？我用的是德语键盘，挪，就是上图第一行右起第二个键的上面那个小可爱。
查维基百科才知道，` 的学名叫 Grave accent ，中文叫“重音符”。在程序猿的世界里，它又被称作 backquote 或 backtick，中文叫反引号。所以，跟这个有关的问题可以这么问：
How do I escape a backtick ` in Markdown?
或者
How to display verbatim/literal inline r code with backticks using Rmarkdown?
第 2 层意思：怎么把反引号显示出来？如果仅仅输入个反引号 ，在同一段里后面没有了还好办，万一又出现一个反引号，就会把他俩自动配对儿，两者之间的文字当成了代码。瞧，就是上句话这个德性。
为了棒打鸳鸯不让他俩自动配对儿，那就用转义符\。输入\`，就避免反引号自动配对变代码了。
第 3 层意思，是怎么把 r 语言的输出结果显示到代码环境里。这个就开始有点绕了。</description>
    </item>
    
    <item>
      <title>Typora: 一款无可挑剔的 Markdown 编辑器</title>
      <link>https://openr.netlify.com/archives/19522/</link>
      <pubDate>Mon, 18 Sep 2017 12:43:59 +0000</pubDate>
      
      <guid>https://openr.netlify.com/archives/19522/</guid>
      <description>&lt;p&gt;我郑重推荐一款免费开源、老少咸宜的编辑器：&lt;a href=&#34;https://typora.io/&#34;&gt;Typora&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于书封面设计的讨论</title>
      <link>https://openr.netlify.com/archives/19401/</link>
      <pubDate>Tue, 27 Jun 2017 09:19:57 +0000</pubDate>
      
      <guid>https://openr.netlify.com/archives/19401/</guid>
      <description>&lt;p&gt;昨天发了新书封面设计的三个方案. 我在微信朋友圈也征求大家的意见, 综合我博客上为数不多的投票, 汇总的结果是 白色 : 黑色 : 蓝色方案 为 2:10:8.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bookdownplus 的两个魔法</title>
      <link>https://openr.netlify.com/zh/blog/bookdownplus-magic/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/bookdownplus-magic/</guid>
      <description>bookdown 是个好东西，只是入手有点难，酒香巷深。
对于 R 初学者来说，如果身边没有人指导，使用者可能需要花大量精力应付 LaTeX，YAML，Pandoc，而很多初学者可能从来没听说过这些，站在 bookdown 的门口往里张望了一下，说不定就被吓跑了，从而错过了门里的精彩世界。
bookdownplus 扩展包，可以让新手对 bookdown 快速上手。从此，bookdown 这坛好酒就不必去深巷苦寻，它就放在你手边。
从 v1.2.0 开始，bookdownplus 增加了两个魔法，更是让新手对 bookdown 一见钟情。如果你对 bookdown 感兴趣却苦于入门的烦恼，那么可以试试这两个魔法。
准备工作首先，安装好必需的软件，包括 R, RStudio, \(\LaTeX\)等。详见 bookdown 官方手册。然后，安装开发版的bookdownplus：
devtools::install_github(&amp;quot;pzhaonet/bookdownplus&amp;quot;)再用 setwd() 将R的工作目录设置到一个空文件夹里。
一切准备就绪后，接下来就是见证奇迹的时刻。
第一个魔法在 R 里运行下面的代码，然后去喝个茶：
for (i in template()[1:19])bookdownplus(template = i, more_output = more_output()[1:3])回来以后，你会在工作目录里看到很多文件和文件夹。打开那个叫做 _book/的文件夹，Duang！19个示例文档，每个都以 pdf、Word、网页和电子书格式乖乖地等在那里，等你打开了。其中，电子书 epub 格式可以在手机上阅读，也可以在台式机用免费的Calibre软件打开阅读。
这些示例文档，从学术论文到诗歌乐谱，从中文到英文，展示了 bookdown 能胜任的工作。是不是动心了？
第二个魔法运行下面的代码，然后看两眼窗外的风景，bookdownplus 就把事情做完了：
for (mf in mail_font()) {for (ms in mail_style()) {for (mt in mail_theme()) {outputname &amp;lt;- paste(&amp;#39;mail&amp;#39;, ms, mf, mt, sep = &amp;#39;_&amp;#39;)bookdownplus(template = &amp;#39;mail&amp;#39;, mail_style = ms, mail_font = mf, mail_theme = mt, output_name = outputname)}}}仍然打开那个叫做 _book/的文件夹，Duang！ 不同字体、不同主题、不同布局的信件示例文档就全部在那里了。</description>
    </item>
    
    <item>
      <title>发布了 4 个 R 语言包：bookdownplus, pinyin, mindr, beginr</title>
      <link>https://openr.netlify.com/archives/19377/</link>
      <pubDate>Fri, 23 Jun 2017 18:29:38 +0000</pubDate>
      
      <guid>https://openr.netlify.com/archives/19377/</guid>
      <description>&lt;p&gt;最近，一口气往 CRAN 提交了四个 R 扩展包，所幸都被发布了，这里简单介绍一下。详细情况请来&lt;a href=&#34;http://pzhao.org&#34;&gt;我的新网站&lt;/a&gt;围观。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R 初学者包 beginr 在 CRAN 正式发布</title>
      <link>https://openr.netlify.com/zh/blog/beginr-released/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/beginr-released/</guid>
      <description>又一次高兴地宣布, 我的 R 语言扩展包 ‘beginr’ (Zhao 2017a) 在 CRAN 正式发布了.
简介beginr是我为 R 语言初学者和自己写的工具包, 是我这些年来收集和自己编写的一些简化操作的函数和备忘录, 可能对中级用户也有帮助. 其实这个包的文档我写得不够详细, 有些函数还没来及整理进去, 之所以匆匆发布, 是想先把 ‘beginr’ 这个名字给占住. 毕竟, 我中意的名字如 ‘learnr’, ’startr’都被别人用过了.
安装方法：
# 稳定版：install.packages(&amp;#39;beginr&amp;#39;)# 开发版：devtools::install_github(&amp;quot;pzhaonet/beginr&amp;quot;)下面分类介绍一下其中的函数.
备忘函数我初学 R 的时候用 plot() 作图时, 常常忘记不同形状数据点(pch)对应的编号, 实线虚线(lty)的编号, 散点图类型(type)的代码, 以及最难选择的颜色代码. 每次忘了都要上网搜一下. 现在, beginr 里提供了 plotpch(), plotlty(), plottype(), plotcolors(), plotcolorbar()等函数, 想不起来的时候运行一下就行了.
beginr::plotpch()beginr::plotlty()beginr::plottype()beginr::plotcolors()beginr::plotcolorbar()快速作图函数我常常需要做线性拟合, 每次又是作图又是添加拟合方程, 繁琐. 现在, beginr 里的一个 plotlm()函数就搞定.</description>
    </item>
    
    <item>
      <title>R 包 bookdownplus 正式发布</title>
      <link>https://openr.netlify.com/zh/blog/bookdownplus-released/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/bookdownplus-released/</guid>
      <description>很高兴地宣布，我的 R 语言扩展包 ‘bookdownplus v1.0.2’ (Zhao 2017a) 在 CRAN 正式发布了。本文是对’bookdownplus v1.0.2’的简要描述. 由于最近更新频繁, 最新版的’bookdownplus’更加强大和易用, 例如 ‘bookdownplus v1.2.0’ 可以一条指令生成19个模板文档的 pdf, word, html 和 epub 四种格式. 建议移步位于 GitHub 的 bookdownplus 项目主页.
简介bookdownplus 是对 bookdown 包 (Xie 2016) 的增强和简化, 是快速使用 bookdown 的最简洁方法。bookdown 就好比 Microsoft Word 或 \(\LaTeX\)，可以用来写文档，而 bookdownplus 提供了很多有用的模板，可以很方便地在 bookdown 平台写期刊论文、学位论文、学术海报、化学分子式、信件、日记、日历、诗集、吉他谱等各种常用文档和书籍。这是功能上的增强（+）。
bookdownplus 使用时只需指定一个模板，给定作者和书名，就可以一键生成模板文件，用户在模板文件里照猫画虎写自己的文字就可以了，不必再花力气上网找模板、设置 YAML 和 LaTeX。这是操作上的简化（-）。
bookdownplus 各个模板的使用方法详见 R bookdownplus Textbook。这本电子书本身就是用 bookdownplus 生成的，尤其是它的 pdf 版本很美观。此书的源码开放，可以作为使用 bookdownplus写书的示例。
下面是 bookdownplus 的简介和快速使用方法。
快速入门准备在开始前，需要安装 R, RStudio, bookdown，和其他依赖的软件和包(例如 Pandoc, \(\LaTeX\), rmarkdown, rticle, knitr等)，作为准备。详见 bookdown 官方手册。</description>
    </item>
    
    <item>
      <title>LaTeX 公式转换成 Word 公式</title>
      <link>https://openr.netlify.com/zh/blog/latex-equations-to-word/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/latex-equations-to-word/</guid>
      <description>最近写了篇论文，投往一家学术期刊。投稿时，Word 格式和 \(\LaTeX\) 格式可以任选，我选了 Word，是因为合作作者用 Word。可是，文稿里的公式是我输入的，而那些公式在我的博士论文里是用 \(\LaTeX\) 写的。为了图省事，我就用了 Word 的插件Aurora，这样，只需把公式的 \(\LaTeX\) 代码往 Word 文档的 Aurora 域里拷贝粘贴，bingo！公式就渲染好了，比 Word 的自带公式漂亮一些。
这篇论文很顺利，很快被接收了。到了最后一步的时候，编辑部要我把文档里的公式修改成可编辑的格式。——本来就是可编辑的呀。嗯，大概是编辑部不使用Aurora，那么他们的 Word 打开我的文档里看到的公式自然就是没法编辑的了。我懒得解释，最后决定把公式全部转换成 Word 公式。
\(\LaTeX\) 公式转成 Word 公式并不难，只需三步：\(\LaTeX\) –&amp;gt; MathML –&amp;gt; 修改 –&amp;gt; Word.
\(\LaTeX\) 公式转成 MathML公式。这可以在 blogdown 里操作，只需把 \(\LaTeX\) 公式代码扔进一个帖子里，运行建站函数，在生成的网页里获取公式的 MathML 代码即可（在公式上点右键 - Show Math As - MathML Code）。没有 blodown 的，用texmath 在线转换也可以。
修改 MathML 代码。将上一步得到的 MathML 代码拷贝粘贴到文本编辑器，然后在开头添上一行：
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;将修改的 MathML 代码全部选中，拷贝粘贴到 Word 里，就自动变成公式了。当然，上面第一步也可以用别的软件来完成，下图是个示例。</description>
    </item>
    
    <item>
      <title>R包发布记</title>
      <link>https://openr.netlify.com/zh/blog/publish-r-packages/</link>
      <pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/publish-r-packages/</guid>
      <description>最近，我把mindr，pinyin 和 bookdownplus 三个包都提交到了 CRAN。这三个包都很简单，我就是想体验一下发布R包的流程，免得将来学R那本书出版了被问起来，答不上来就丢人了，另外也算是承接菜鸟致简速成那篇帖子，里面只谈了野包的发布分享，而只有提交到了 CRAN，野包才算转正。
很快，这三个包都成功转正，可以正常安装了：
install.packages(&amp;#39;mindr&amp;#39;)install.packages(&amp;#39;pinyin&amp;#39;)install.packages(&amp;#39;bookdownplus&amp;#39;)这里说说发布的过程和我遇到的一些问题。
自查包发布之前，先自查有没有错误。只需用RStudio打开待发布的R包的.Rproj文件，然后点击右上方面板的 Build - Check 按钮，就可以看到自查结果。
这里要注意：
结果里尽量不要包含任何 Notes 和 Warnings。如果有，就去找到问题修改，不然在提交的时候会被退回。
关于author &amp;lt;author&#39;s email&amp;gt;的那一条 Note 是可以忽略的，只是提醒你再次看看作者信息有没有填错。
我最初的自查结果有些 Notes 我原以为可以无视。比如，DESCRIPTION 文件里 Title 字段有些词要求首字母大写，我心想，这也算错误？就没理。再比如，告诉我 “no example. no test. no vignette.” 我心想，好像很多包都没有这几样，不也都发布了么？所以我同样无视。结果就是……
下面接着讲。
提交把包的压缩文件在 CRAN 的网页上传即可。成功上传后会收到 email 通知，需要点击里面的链接进行确认。
我两个宝贝儿 mindr 和 pinyin 的1.0.0版是六一那天上传并确认的，之后我就等，一直等到6月16号，我才想起来这事儿，就发信给 CRAN cran@r-project.org 催了一下，当天就得到了 Dr. Uwe Ligges 的回复，说：
你那两个包在提交当天就被系统自动拒收了，因为系统自动检查时发现了两个 Notes。系统自动发信通知你了，如果没收到，请翻翻垃圾邮件。
我一翻邮箱的 spam，果然，拒信早就在里面了。</description>
    </item>
    
    <item>
      <title>《学R》序（朱彤）</title>
      <link>https://openr.netlify.com/zh/blog/preface_zhu/</link>
      <pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/preface_zhu/</guid>
      <description>&lt;p&gt;我读硕士研究生时的导师是朱彤教授。在朱老师科研小组 ZTGroup 学习的三年如沐春风，我从中得到的收获受益终生。正值北京大学环境大楼落成不久，又逢毕业季，作为环境科学与工程学院的院长，朱老师在极其繁忙的工作中抽出时间来为本书欣然作序，实属不易，仅凭“感激”二字岂能表达我们的谢意？&lt;/p&gt;

&lt;p&gt;下面是朱老师为本书写的序言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pinyin: 把汉字转换成拼音的R包</title>
      <link>https://openr.netlify.com/zh/blog/pinyin/</link>
      <pubDate>Fri, 26 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/pinyin/</guid>
      <description>&lt;p&gt;今天新写了个R包，粗暴地取名为 &lt;a href=&#34;https://github.com/pzhaonet/pinyin/&#34;&gt;pinyin&lt;/a&gt;，作用是把汉字转换成拼音。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微气象学常用的 LaTeX 公式</title>
      <link>https://openr.netlify.com/zh/blog/equations/</link>
      <pubDate>Tue, 23 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/equations/</guid>
      <description>这些年，论文发得不多，公式却攒了不少，大部分都是自己亲手敲的 \(\LaTeX\) 代码。我把他们整理在一个 eq.tex 文档里，配合一个编译好的 eq.pdf 文件。每次需要的时候，在 eq.pdf 里找到需要的公式，然后去 eq.tex 找公式代码，拷到目标文档里完事儿。稍微有点小麻烦，但总比重新敲一遍代码要省事、准确。
然而，现在有了 blogdown 和 Hugo-academic 主题，一切都变得不一样了。我把 eq.tex 里的文本全部拷贝粘贴到一个 .Rmd 文件，扔进网站里，就得到了现在这个帖子。鼠标放在公式上点右键- Show Math As - \(\TeX\) Commands，就得到了公式的 \(\LaTeX\) 代码。直接拷贝就行了，再也不用在两个文档里切换以及找来找去。
我觉得，我再也回不去了。
MeteorologyAtmpspheric pressure\[\begin{equation}P=101.325 \cdot (\frac{293-0.0065z}{293}) ^ {5.26} = 86.838\,\text{kPa}\end{equation}\]
\(z\): elevation above sea level in m.
\[\begin{equation}-\text{d} p =\rho g \text{d}z\end{equation}\]
\[\begin{equation}\ln \frac{p_2}{p_1} = - \int_{z_1}^{z_2} \frac{g}{RT}\text{d}z\end{equation}\]
Psychrometric constant\[\begin{equation}\gamma =\frac{c_p P}{\varepsilon \lambda} = 0.</description>
    </item>
    
    <item>
      <title>R mindr: 把 Markdown 转成思维导图</title>
      <link>https://openr.netlify.com/zh/blog/mindr/</link>
      <pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/mindr/</guid>
      <description>将 markdown (.md, .Rmd) 文件转换成思维导图的 R 扩展包 mindr 是我写的第五个 R 包，安装方法如下：
稳定版：
install.packages(&amp;quot;mindr&amp;quot;)开发版：
devtools::install_github(&amp;quot;pzhaonet/mindr&amp;quot;)使用方法：
在R的工作目录创建个名叫 mm/ 的文件夹，丢进去一堆 markdown 文件 (.md, .Rmd)，然后运行：
mindr::md2mm()就得到个 mm.mm 的思维导图文件，用免费的思维导图软件 freemind 可以直接打开。界面比较简陋。或者用漂亮的免费软件 Xmind，需要选择导入 freemind 导图。
mindr包还有另外两个函数：mm2md()是反向操作，将思维导图转换成markdown;outline()是从markdown文件里提取出各级标题生成大纲。
我的书稿《学R》最初是先用思维导图拟定框架，然后在 Word 里写，后来转到 bookdown 里完成的。今天下午，我在书稿的旧思维导图里照着新稿修改，想把两者统一了。改着改着，觉得不对劲儿呀，R markdown 的哲学是维护一份文档，导出多个格式，我怎么又开始维护两份内容相同只是格式不同的文档了？
这肯定不是什么新问题，肯定有办法直接把 markdown 转成思维导图。于是我搜。我搜搜搜，竟然没搜到！
这就怪了。从常识上判断，我认为这个工具肯定有，说不定藏在某个 R 包里，只是太隐蔽了。
是应该继续搜呢，还是自己动手？有时候真是难以权衡。我掂量了一下轻重，选择了后者。
晚上，写好了。
先拿 bookdown 书稿当小白鼠练手，用 freemind 直接打开：
freemind 确实简陋。再拿 blogdown 书稿 试试，导入 Xmind 看看：
还不错。好了，实验成熟了，放心地用在自己的书稿上，并且挑个最漂亮的款式：
更新：2017-06-19，‘mindr 1.0.4’ 在 CRAN 正式发布。</description>
    </item>
    
    <item>
      <title>R blogdown 科研网站的公式和参考文献</title>
      <link>https://openr.netlify.com/zh/blog/rblogdown-bib/</link>
      <pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/rblogdown-bib/</guid>
      <description>本网站的公式和参考文献一直未能正常显示，直到今天我才把这两个问题解决。
公式公式的问题迟迟未解决，是因为我看到人们在讨论往html文件里加 Load mathjax 代码这种解决方案，一看就头大，不想做。
其实，我用的hugo-academic主题，据说是支持数学环境的，据说在 config.toml 里设置 math = true就开启全站支持，在单篇post的yml头里这样设置就开启单篇支持。可是我两样都试过，然后运行 blogdown::serve_site()测试，在RStudio的Viewer里都不能成功显示公式。
今天突然灵光一现，心想不会是RStudio Viewer的问题吧？于是点击Viewer左上角的 Show in new window 按钮，用外部浏览器打开一看，Duang！帖子里的公式就都可以正常显示了！这里秀一个：
帖子里输入下面的 \(\LaTeX\) 公式：
$$\int_0^\infty e^{-x^2} dx=\frac{\sqrt{\pi}}{2}$$网页就会显示：
\[\int_0^\infty e^{-x^2} dx=\frac{\sqrt{\pi}}{2}\]
参考文献两个多月前，就有个哥们儿问“有没有可能在blogdown创建的网站里添加参考文献?”作者回答得干脆：“有。”两人对话戛然而止，让我目瞪口呆。由于在blogdown 官方手册里并未看到添加参考文献的方法，我一直以为这个功能尚在开发中，直到今天也没见动静，有些起疑，就随便试了一下，步骤跟在 bookdown 里一样：
把参考文献库 .bib 文件考到 content\post\.在帖子 .Rmd 文档的 yml 头里声明 .bib 文件的名称和路径。这里我设成 bibliography: [book.bib, packages.bib].在帖子里引用 .bib 里的文献条目，例如 [@R-blogdown].运行建站函数 blogdown::build_site().就这样，说时迟那时快，只见Duang！帖子里的引用就显示成了 (Xie 2017) ！而帖子末尾的参考文献列表就自动出来了！
blogdown 可以如此方便地往帖子里插入计算代码、图表、公式、参考文献，我实在找不出第二个这样的工具。建科研网站，非 blogdown 莫属！
最后顺便提一下：虽然最新正式版的 RStudio 1.</description>
    </item>
    
    <item>
      <title>9分钟写个R语言包：菜鸟致简速成</title>
      <link>https://openr.netlify.com/zh/blog/rmickey/</link>
      <pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/rmickey/</guid>
      <description>写R包这种高大上的工作，原以为学会怎么写得花个一年半载，学会之后写一个包怎么着也得个把月，谁料想周一上午下了决心，到周二下午就一口气写了4个包，算起来从学到写，只花了一天多时间。这里是个小结。
学写R包，我主要参考了3份资料：
谢益辉的开发R程序包之忍者篇，2011年。反复读了好几遍。黄俊文的极简R包建立方法, 2013年。反复读了好几遍。Hadley Wickham 的R packages, 2015年。反复扫了好几眼。有了这3份很好的资料，那我还写本篇帖子做什么？
这是因为，他们都是高手中的高手，只是我觉得他们写得，就好比教授写幼儿园教材，仍然不太合小朋友的胃口，不足以让我等菜鸟快速入门。比如读到roxygen2是多么美妙，我起初完全没体验，不知道“举头望文档，低头思函数”到底说的是什么（what the hell was Yihui talking about? 当然，一天之后我就体会到了静夜思的精妙），再一看Emacs就被吓得河水倒流，当年光一个vim就把我折腾个半死。而极简篇里，我觉得既然是极简，能减掉的步骤尽量减，所以还能继续剪。可能当年是极简，时过境迁，人类进步，现在可以比极简更简。
下面，我试试写个减到不能再减的一剑封喉致简版，只需小改两个文本文件，不出十分钟就写出一个能用的R包。
准备跟前期准备和后期维护相比，写包本身其实是最简单的环节。假定你已经安装好了R和RStudio，那么，运行R，安装几个包：
install.packages(c(&amp;quot;devtools&amp;quot;, &amp;quot;roxygen2&amp;quot;, &amp;quot;testthat&amp;quot;, &amp;quot;knitr&amp;quot;))然后：
Windows用户，安装 rtools.Linux用户，安装对应的 R 开发包，sudo apt-get install r-base-dev.OS X 用户，安装command-line-tools，Terminal 运行 git 或者 xcode-select.致简四部曲参照益辉的rmini，我做了个更简单的模板（Update：根据Dong的建议，也可以RStudio - File - New project - New directory - R package），叫做rmickey。点击下载并解压缩，得到个名叫rmickey文件夹。这个文件夹名字可以随便改。
双击rmickey.Rproj（这个文件名也可以随便改），就会用RStudio打开这个项目。后续步骤全部在RStudio里操作。
点击打开RStudio右下窗口Files下的DESCRIPTION文件（这个文件名千万别改）和R/foo.R文件（这个文件名可以随便改）。DESCRIPTION里是你的包的描述信息。可以看到包名称，版本，日期，包标题，包作者，维护者，依赖性，描述等信息。把其中每一条冒号后面的信息改成你自己的信息，比如把第一行包的名称改成mymickey，保存。R/foo.R里是你的包里包含的自定义函数，模板里只列了一条做示例。函数的写法跟平时没区别。而函数前面的几行，就是所谓的说明文档，都以#&#39;开头，第一行是简要介绍，以@param开头的行逐个介绍函数的自变量（懒得介绍的话就像示例里的x2那一行一样空着，但x2后面必须有一个空格），@return开头的行介绍因变量（必填），@export @examples两行可以不修改。有更多函数的话，照葫芦画瓢在文件里往下继续写就是了。保存。
点击RStudio右上窗口的Build标签下的Build &amp;amp; Reload按钮，包就编译并自动安装好了！</description>
    </item>
    
    <item>
      <title>postr: 用R Markdown做海报</title>
      <link>https://openr.netlify.com/zh/blog/postr/</link>
      <pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/postr/</guid>
      <description>用R markdown写海报的扩展包postr安装使用方法（需要先安装好软件环境，详见postr项目主页）：
devtools::install_github(&amp;quot;pzhaonet/postr&amp;quot;)setwd()postr::postr()益辉的莽撞人项目，悬赏解决“用 R Markdown 做海报”这个技术难题。我私下说，Markdown走的是LaTeX路线，讲究篇章结构和逻辑，而海报追求更多随意性和艺术性，即使学术海报也不例外，所以费劲硬要用Markdown解决，可能吃力不讨好。倒不如Powerpoint来得方便，或者把整个海报在R里当成一个device，用layout画图来实现。话虽这么说，我仍然在留意这件事，因为我在新书学R里提出R语言科研方案的整体拼图，被我几乎全部拼完了，只缺海报这一块。这就好比在朋友圈发照片只发八张，看一眼就浑身不自在。
前几天，做bookdownplus时找模板，在比利时鲁汶大学的一大堆模板当中，我极其偶然地发现，里面暗暗潜伏着的，竟然有用R Markdown制作海报的秘密，淹没在一大堆文件里，搞不清楚各个文件之间的关系，而且说明文档过于简单，用起来不够方便。于是，我花了些工夫，把海报部分择了出来，稍加修改，增添了几个自己做的颜色主题，纳入了bookdownplus里。我的想法是，用户只需下载我这个文件夹，选择好模板，一运行，就出来个Rmd文件，打开一点knit按钮，Duang！海报就出来了。
于是去揭“莽撞人”榜。榜主说：很好。然后说：做成个包吧！名字都起好了，叫postr。为啥不直接叫poster？我猜大概是postr跟knitr的命名法类似，更容易搜到吧。
想来也是。我这种下载文件夹的方法毕竟路子太野，不符合R语言的习惯，大家更喜欢的是做包，上传，安装。但是我从来没做过包。而且，我认为做包是R语言里高大上的东西，我不认为自己能很快学会做。于是，我在朋友圈招贤，看有没有谁愿意把这活儿给接过去。消息放出去一天，无人理睬。
得，自己来吧。
这天大娃生病了，早上带他看医生。诊所人满为患。排队的时候，我把网上几篇关于R包开发入门的帖子扫了几遍，好像不太难哦。从诊所出来，十点多了，一到办公室，就干劲十足地折腾。事情出乎意料的顺利。我原以要到明年才能把这个包写出来，结果当天下午就写完了。这个过程里，多亏了几位前人的工作，几年前还很繁琐复杂的R包开发，现在分分钟就能写一个玩玩。
既然这么容易，我顺手把bookdownplus也写成了个包。然后把平时常用的方程写成了第三个包。我还准备写个R包开发菜鸟教程，于是又写了个示例包。
从对R包开发一无所知，到一口气干掉四个包，花了不到两天工夫。用力过猛，有点撑了，我隐隐觉得不妙：好像不该这么顺利吧。
果然，postr放到github当天晚上，就有人留言了。我很好奇这哥们儿是怎么在第一时间发现我这么个无名之辈发布了一个包。这哥们儿先说，postr这个名字起得好，很容易记住。这得感谢益辉，他给我的域名提的建议也让人说容易记。然后这哥们儿说：这个包他运行无法通过。
这时我陡然发现，这才是R包开发的关键。写个包发布到github并不难，难的是解决用户的问题。
前面等待的，将是一个又一个的坑。</description>
    </item>
    
    <item>
      <title>R bookdown&#43;: 用 R bookdown 写期刊论文、日记、信件、日历、吉他书、化学方程式</title>
      <link>https://openr.netlify.com/zh/blog/bookdown-plus/</link>
      <pubDate>Tue, 09 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/bookdown-plus/</guid>
      <description>注意：本文所述的bookdown+这个项目已经停止开发，继承者是我新开的R包项目bookdownplus ，这是因为我学会了写R包。当然，说不定有些朋友不喜欢安装R包，喜欢下载个文件夹直接免安装用，那么本文所述的方法仍然可以继续使用，只是我不再更新了而已。
R bookdown 能做的事情很多，可是那些功能迟迟不来，我只好自己动手，写了个 bookdown+，目前大体实现了用 bookdown 写期刊论文、化学分子式、信件、日记、日历等功能。当然，有些还没完全实现，革命不够彻底，带着浓重的\(\LaTeX\)旧社会的气息。革命尚未成功，同志仍需努力。
下面是 bookdown+ 的简介和快速使用方法。
背景R bookdown+，听起来像是跟R[@R-base]的扩展包bookdown[@R-bookdown]有关吧?
一点没错！我们知道，bookdown天生是个用来写编程书籍的称手工具。只是，这仅仅是硬币的一面。bookdown的功能远远不止如此。它就像一个美味的蛋糕，我等啊等啊，等着谁把它切开，实在等不及了，就自己下手吧。所以，我弄了个bookdown+。
bookdown+是bookdown的扩展。我数年前收集了一些\(\LaTeX\)模板，现在我把他们整理到bookdown+里，这样就可以开开心心在bookdown的环境里做喜欢的事情。bookdown+ 展示了硬币的另一面：你可以用它来写写期刊论文、化学分子式、信件、日历、甚至日记。
另一方面，我从个人角度对bookdown的使用做了简化。官方提供的bookdown模板虽然很好用，但对新手来说略显繁琐，需要：
在index.Rmd和_output.yml两个文件里设置yaml，需要在_bookdown.yml里设置文件名；对中文用户来说，还得跟LaTeX打交道，需要考虑before_body.tex, after_body, preamble.tex里面的设置。这些操作可能让新手望而生畏。
R bookdown+用起来就容易多了，只需在一个叫做_runme.R的文件里设置好书名、作者，选好模板，binggo！就可以开始放心写自己的文字了。
功能扩展，操作简化，这就是R bookdown+。
在不久的未来，肯定会出现很多官方的bookdown模板，但是我不想等了。你要是也等不及，就跟我来一起使用或开发[bookdown+]吧！
快速入门预备在开始前，你需要安装 R, RStudio, bookdown，和其他依赖的软件和包(例如 Pandoc, \(\LaTeX\), rmarkdown, rticle, knitr等)。详见bookdown官方手册.
准备好后，从Github下载bookdown+压缩文件。解压缩到你的电脑里，在得到的文件夹里找到 _start.Rproj文件，双击就会在RStudio里打开一个项目。
文件夹里还有个_runme.R文件。你可以双击打开并运行。下面是对这个文件里代码的详细解释。
第1步：标题和作者改成你自己书的标题和作者名。
title &amp;lt;- &amp;#39;bookdown+: Authoring Articles, Mails, Guitar books, Chemical Molecular Formulae and Equations with R bookdown&amp;#39;author &amp;lt;- &amp;#39;Peng Zhao&amp;#39;第2步: 模板在给定的可用模板里选择你想要的。这里我们选第8个。</description>
    </item>
    
    <item>
      <title>Hugo 网站的浏览器小图标</title>
      <link>https://openr.netlify.com/zh/blog/hugo-icon/</link>
      <pubDate>Wed, 19 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/hugo-icon/</guid>
      <description>网站图标，就是下图的这些东东，用浏览器打开网站时显示在地址栏的顶端。R blogdown安装的hugo-academic主题，默认图标是个蓝色学位帽，挺好看的，不改也行，只是如果大家都用的话，泯然众人，识别度就低了。
改的方式很简单：将你自己的图标图片保存为.png格式，并命名为icon.png，替换\themes\hugo-academic\static\img\icon.png即可。
update: 更好的方案来自yang Cao的提议：把icon.png放在static/img/，避免在更新themes时将自定义图标覆盖。</description>
    </item>
    
    <item>
      <title>Hugo 网站的RSS</title>
      <link>https://openr.netlify.com/zh/blog/hugo-rss/</link>
      <pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/hugo-rss/</guid>
      <description>R blogdown 搭建的 Hugo 网站，小细节很多，可以一点一点完善，好在都不难搞定。今天添加了个RSS订阅按钮。
自从 Google Reader 死后，我就觉得 RSS 没有多大趣味，就好像子期死后伯牙摔琴一样。但是，没有 RSS 提醒的话，还真不知道谁的博客更新了，于是就勉强用 feedly 凑合。眼看我的新网站构架基本完成，就在 feedly 里订阅了一下自己的网站，输入 pzhao.org，发现没找到。嗯？研究一下才明白，我的主页完整地址是：
http://pzhao.org/zh/这个路径对应的本地文件夹下面，不仅有个index.html，还有个index.xml，后者就是 RSS 订阅的文件。所以，在feedly添加：
http://pzhao.org/zh/index.xml就把我的新网站添进去了。这是订阅全站。如果只想订阅其中的博客，或新发表的学术文章，或新做的报告，那么：
http://pzhao.org/zh/post/index.xmlhttp://pzhao.org/zh/publication/index.xmlhttp://pzhao.org/zh/talk/index.xml这个RSS链接，我该放到主页的什么位置，来方便网友订阅呢？我决定放到我的头像下面的社交按钮里。
头像下的社交按钮是在config.toml里设置的，只需添加个[[params.social]]就可以了，图标去fa或ai两个包的主页找便是。实在缺乏社交，只好把自己卡拉OK的录音和腾讯视频加进去凑数，代码如下：
 [[params.social]]icon = &amp;quot;rss&amp;quot;icon_pack = &amp;quot;fa&amp;quot;link = &amp;quot;http://www.pzhao.org/zh/index.xml&amp;quot;[[params.social]]icon = &amp;quot;music&amp;quot;icon_pack = &amp;quot;fa&amp;quot;link = &amp;quot;http://kg.qq.com/node/personal?uid=649d9d85212c3489&amp;quot;[[params.social]]icon = &amp;quot;video-camera&amp;quot;icon_pack = &amp;quot;fa&amp;quot;link = &amp;quot;http://v.qq.com/vplus/0f8190586a3f2f22a25e9827b38c171e&amp;quot;</description>
    </item>
    
    <item>
      <title>斜杠</title>
      <link>https://openr.netlify.com/zh/blog/slash/</link>
      <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/slash/</guid>
      <description>&lt;p&gt;在我的新书在线试读章节，益辉同学提出了&lt;a href=&#34;http://dapengde.com/xuer/post/2017-04-15_blogdown/#comment-3258130059&#34;&gt;一个话题&lt;/a&gt;，那就是斜杠。这个小东西已经困扰我多年了，事儿不大，我憋着一直没敢说，这回有益辉这么一位神级人肉盾牌罩着，就趁机吐个槽。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo 网站 academic 主题的多语言界面</title>
      <link>https://openr.netlify.com/zh/blog/hugo-multilingual/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/hugo-multilingual/</guid>
      <description>&lt;p&gt;几年前我弄过&lt;a href=&#34;http://dapengde.com/archives/15265&#34;&gt;双语博客&lt;/a&gt;， 后来放弃了，因为 WordPress 的双语方案有些遗留问题让我不爽，另外我没有精力写英文博客。现在，新网站是个科研网站，博客可以只出现在中文版里，而英文版只放自己的学术情况就行了，不用像博客更新那么频繁。所以，双语界面几乎是排在第一梯队的需求。&lt;/p&gt;

&lt;p&gt;我对Hugo的架构并不熟悉，原以为会很麻烦，结果弄一会儿就搞定了，原来这么简单。有些步骤在&lt;a href=&#34;http://dapengde.com/blogdown_demo_academic/post/getting-started/&#34;&gt;主题的说明文档里&lt;/a&gt;提到了，但不够全。完整的步骤是这样的(看起来长，是因为我啰嗦，其实很快就能设置完)：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Word 永远转不成 Markdown</title>
      <link>https://openr.netlify.com/zh/blog/word-never-markdown/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/word-never-markdown/</guid>
      <description>&lt;p&gt;R bookdown 用扩展的 Markdown 语法来写书，可以很方便地导出 Word 格式，虽然不完美，但只需稍微调一下样式，就是一个漂漂亮亮的文档。但是，如果在 Word 里做了修改，想转回 Markdown 该怎么办？&lt;/p&gt;

&lt;p&gt;多年来，我一直奢望能找到这样一款软件，哪怕是把 Word 转成 LaTeX 也行。随着时间的流逝，希望却是越来越渺茫; 我越来越深信，这样的软件过去不曾有，现在还没有，将来永远都不会有。因为，逻辑上是不可能实现的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo 网站 academic 主题首页的文摘显示问题</title>
      <link>https://openr.netlify.com/zh/blog/hugo-academic-summary/</link>
      <pubDate>Sat, 15 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/hugo-academic-summary/</guid>
      <description>在 RStudio 里用 R blogdown 来维护网站时，可以通过点击工具栏的 Addins - New Post 来创建新帖子，很方便。但是，如果用的是 Hugo 的 academic 主题，那么创建的新帖子在网站首页会显示全文，不大好看，尤其是全文很长的时候，根本就不像个首页了。这是因为，academic 首页的 posts 模块默认显示文摘。如果没有为每篇帖子设置文摘，就会显示全文。而上面说的创建新帖的方法里，并没有设置文摘的选项。那么，文摘在哪里设置呢？
直接说答案：手动在新帖的YAML文件头添加一行：
summary: &amp;quot;我的文摘别太长。&amp;quot;答案来自blogdown 项目主页。
就这么个小问题，让我走了点弯路。我发现问题后，首先观察了一下主题自带的示例文档，文件头是这样的：
+++date = &amp;quot;2016-04-20T11:00:00&amp;quot;draft = falsetags = [&amp;quot;academic&amp;quot;, &amp;quot;hugo&amp;quot;]title = &amp;quot;Customizing the homepage with widgets&amp;quot;math = falsesummary = &amp;quot;&amp;quot;&amp;quot;Enable/disable and configure widgets to customize your homepage.&amp;quot;&amp;quot;&amp;quot;+++跟 R blogdown 生成的 .md 和 .Rmd 文件的文件头不同，这个文件头居然是用前后各三个加号表示的。里面的summary开始数三行，就是用来设置文摘的。
于是我就把这三行拷贝粘贴到 .Rmd 文件里，当然是编译出错了。接着我想当然地把上面这段前后共六个加号的文件头拷贝粘贴到 .</description>
    </item>
    
    <item>
      <title>Hugo 网站的 Disqus 加载问题</title>
      <link>https://openr.netlify.com/zh/blog/hogo-disques-problem/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/hogo-disques-problem/</guid>
      <description>今天，复活节假期前夕，同事们都休假了。我虽然在办公室，却无心上班，发了一会儿呆，想想与其痛苦地工作，不如快乐地解决一下新网站的一个小问题：disqus 评论框的加载。
用 R blogdown 打建好站，disqus评论框就一直没成功加载过。后来听说是config.toml里 disqus shortname指的不是我的disqus ID，而是要专门设置一下， 我说“啊,还有这事儿？”于是就设置了一下，但是仍然不能成功加载。这个问题放了几天，今天心血来潮一搜，嗯，兴许是路径的问题，于是就把config.toml开头的路径改为
baseurl = &amp;quot;http://www.pzhao.org&amp;quot;# relativeurls = true然后运行R语言的建站函数：
blogdown::build_site(local=FALSE)注意！此处千万不要运行blogdown::serve_site()，不然新生成的文件就又没法加载 Disqus 了。网上说是serve_site()忽略了config.toml里的某些设置而造成的。我不懂，总之就是建站函数运行完就直接上传。
然后GitHub同步，几秒钟后，Netlify上完成了更新，Disqus评论框就乖乖出现了。
欢迎来留言测试。
啥，你看不见？嗯，听说好像是被墙了。</description>
    </item>
    
    <item>
      <title>侠气</title>
      <link>https://openr.netlify.com/archives/19309/</link>
      <pubDate>Thu, 13 Apr 2017 12:49:17 +0000</pubDate>
      
      <guid>https://openr.netlify.com/archives/19309/</guid>
      <description>&lt;p&gt;我这个博客，访问量最大的帖子就是《 &lt;a href=&#34;http://pzhao.org/r4dummies&#34;&gt;R 菜鸟入门&lt;/a&gt;》。这是写给 R 语言新手的。四年前发布以来，浏览量累计大约 2 万。也就是说，如果只计算工作时间的话，平均每天每小时都有2个人在浏览这些帖子，如此连续了四年，对于这样一个小站来说，我还是挺得意的。就算是在高校讲课，如果每个班20人，每个学期一个班，我得教500年，才能这么大规模地普及 R 语言。但是500年后R语言早就不存在了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用 R blogdown 搭建个人博客或科研网站</title>
      <link>https://openr.netlify.com/archives/19304/</link>
      <pubDate>Tue, 11 Apr 2017 14:10:56 +0000</pubDate>
      
      <guid>https://openr.netlify.com/archives/19304/</guid>
      <description>&lt;p&gt;我正在撰写新书《 R 菜鸟入门》，新书预计今年下半年出版。本文是其中一个章节。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R blogdown 搭建个人博客或科研网站</title>
      <link>https://openr.netlify.com/zh/blog/r-blogdown/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/r-blogdown/</guid>
      <description>本文收录在《学 R 》一书的附录中。
互联网时代有个自己的网站，就好像真实世界里有了自己的房子（服务器）和固定地址（域名）；自我介绍时附上自己的网站，就像生活里邀请朋友来访或者职场上递上名片，都甚为方便。然而，建立一个网站并不容易，涉及诸多领域的知识和技能，门槛比较高。好在，我们有万能的R语言，搭建网站只需几分钟，而并不需要多少网络知识。你甚至不用懂 R 语言是什么，照我下面说的做就行，包教包会，学不会免费再教。
这里，我提供两个示范，演示如何使用 R 语言的 blogdown 扩展包1，用来搭建一个个人博客和一个科研小组网站。截至本文成稿之日，blogdown 含苞待放，尚未正式发布，但是已经能够正常安装使用了。我们来尝尝鲜，提前一睹她的芳容。
R blogdown 简介和安装R blogdown 是什么
R语言的一个扩展包，用来制作网站的工具。可以用非常简洁的方式快速搭建静态网页构成的网站。虽然名字里有“博客”（blog）字样，但并不仅限于博客。非常适合搭建一个科研小组的展示窗口。基于 markdown 扩展语法，可以在网页中方便地插入图表、脚注、数学公式、R 代码等元素。非常容易将 bookdown 生成的论文转化成网页展示。非常易于维护，迁移，备份。本书的官方网站就是用 R blogdown 搭建的。网站里给大家提供的 R 示例代码、试读章节、勘误表等，都是直接从书稿中拷贝粘贴到文本文件里，然后运行一下 blogdown 的指令，网站就自动更新了。
安装
blogdown 的背景平台是 R 语言，用户界面首选 RStudio ，产生的网站框架是 Hugo ，掰手指头数一数，要安装4样东西，略显繁琐，但并不难，一劳永逸。安装方式如下：
R。去R的服务器CRAN，点击Download R for Windows（其他操作系统的用户请自便），在打开的新网页最上方点击base，就找到下载链接了。下载完毕后安装，一路“下一步”的傻瓜式安装即可。RStudio。去官网下载安装文件运行即可。if(!require(devtools)) install.packages(&amp;#39;devtools&amp;#39;)devtools::install_github(&amp;#39;rstudio/blogdown&amp;#39;)解释一下：由于 blogdown 目前只发布到了 GitHub 服务器上，尚未发布到CRAN，所以上面第一条代码先安装开发工具 devtools 包，第二行用这个包的install_github() 函数从 GitHub 安装。
blogdown::install_hugo()安装完毕。</description>
    </item>
    
    <item>
      <title>用 R bookdown 写吉他谱</title>
      <link>https://openr.netlify.com/archives/19291/</link>
      <pubDate>Thu, 06 Apr 2017 09:15:36 +0000</pubDate>
      
      <guid>https://openr.netlify.com/archives/19291/</guid>
      <description>&lt;p&gt;前情提要：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pzhao.org/archives/19122&#34;&gt;用 R 语言的 bookdown 写书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pzhao.org/archives/19150&#34;&gt;用 R 语言的 bookdown 写诗集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pzhao.org/archives/19190&#34;&gt;用 R 语言的 bookdown 写学术论文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pzhao.org/archives/19141&#34;&gt;R 语言 bookdown 快速入门和语法速查&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本篇说说如何用 R 语言的 bookdown 写吉他谱。别拦着我，让我陷进bookdown的怀抱里爽死吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R bookdown 写学术论文</title>
      <link>https://openr.netlify.com/zh/blog/r-bookdown/</link>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/r-bookdown/</guid>
      <description>&lt;p&gt;&lt;em&gt;1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;最近，我使用 R 语言的 bookdown 扩展包接连做了三件事：先是整理出一本跟&lt;a href=&#34;http://dapengde.com/archives/19122&#34;&gt; R 语言有关的书&lt;/a&gt;，然后把博客的帖子整理出一本&lt;a href=&#34;http://dapengde.com/archives/19150&#34;&gt;纯文本的中文书&lt;/a&gt;，这两天我又在用它来写一篇打算投稿的学术期刊论文。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如果用bookdown来写诗集</title>
      <link>https://openr.netlify.com/archives/19150/</link>
      <pubDate>Wed, 15 Mar 2017 14:21:56 +0000</pubDate>
      
      <guid>https://openr.netlify.com/archives/19150/</guid>
      <description>&lt;p&gt;今天，我用R的bookdown做出了第一本电子书：&amp;lt;&lt;a href=&#34;https://bookdown.org/baydap/papasdiary/papasdiary.html&#34;&gt;爸爸三定律&lt;/a&gt;&amp;gt;。内容是从我博客上选的育儿相关帖。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R bookdown 快速入门和语法速查</title>
      <link>https://openr.netlify.com/archives/19141/</link>
      <pubDate>Wed, 15 Mar 2017 07:29:47 +0000</pubDate>
      
      <guid>https://openr.netlify.com/archives/19141/</guid>
      <description>&lt;div class=&#34;section level2&#34;&gt;
  &lt;h2&gt;
    快速开始&lt;br /&gt;
  &lt;/h2&gt;
  
  &lt;div id=&#34;r-bookdown-&#34; class=&#34;section level3&#34;&gt;
    &lt;h3&gt;
      R bookdown 是什么&lt;br /&gt;
    &lt;/h3&gt;
    
    &lt;ul&gt;
      &lt;li&gt;
        一个用来写书写文章的软件。
      &lt;/li&gt;
      &lt;li&gt;
        比Word更美观，比LaTeX更易用，比Markdown格式更丰富。
      &lt;/li&gt;
      &lt;li&gt;
        可以方便地插入目录、图表、交叉引用、脚注、索引。
      &lt;/li&gt;
      &lt;li&gt;
        可以方便地插入公式、参考文献、R代码。
      &lt;/li&gt;
      &lt;li&gt;
        可以生成漂亮的pdf、word和网页文件。
      &lt;/li&gt;
      &lt;li&gt;
        撰写可重复性报告的不二之选。
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;</description>
    </item>
    
    <item>
      <title>不可挡的bookdown</title>
      <link>https://openr.netlify.com/archives/19122/</link>
      <pubDate>Tue, 14 Mar 2017 14:36:57 +0000</pubDate>
      
      <guid>https://openr.netlify.com/archives/19122/</guid>
      <description>&lt;p&gt;最近，我打算把博客上关于R语言的帖子整理成一本书，希望弄得帅气一点，整齐一点，将来容易维护一点。涌进脑子的第一个念头是 &lt;span class=&#34;math inline&#34;&gt;(\LaTeX)&lt;/span&gt; ，第二个念头是想吐。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R bookdown 语法标记速查</title>
      <link>https://openr.netlify.com/zh/blog/bookdown-cheatsheet/</link>
      <pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/bookdown-cheatsheet/</guid>
      <description>快速开始R bookdown 是什么一个用来写书写文章的软件。比Word更美观，比LaTeX更易用，比Markdown格式更丰富。可以方便地插入目录、图表、交叉引用、脚注、索引。可以方便地插入公式、参考文献、R代码。可以生成漂亮的pdf、word和网页文件。撰写可重复性报告的不二之选。安装下载R并安装。下载RStudio并安装。下载CTEX并安装。建议安装完整版。下载Pandoc并安装。运行RStudio。在左上面板的代码窗口输入并运行以下代码（安装bookdown扩展包）：install.packages(&amp;quot;bookdown&amp;quot;)install.packages(&amp;#39;servr&amp;#39;)好了，安装完毕。
从模板开始下载模板文档（到下载页面点击Clone or download - Download ZIP）：如果你要写英文文档，那么下载通用模板;如果你要写中文文档，那么下载中文模板。将模板文档解压缩到任意文件夹。
在解压缩后得到的文件里找到扩展名为.Rproj的文件。双击，默认会用RSudio打开。
在RStudio右上面板点击Build标签，再点击build book。好了，模板书出现在名为_book的子文件夹里。
在RStudio右下面板里会看到该文件夹里的文件，其中有一些扩展名为.Rmd的文件。逐个点击打开，把其中的内容修改成你自己的内容。除了index.Rm外，不需要的.Rmd文件可以删掉。
重复第4步，就得到了你自己的书。
对照一下.Rmd的文件内容和生成的文档，体会两者之间是如何对应的。
基本标记标记输出*斜体*斜体**粗体**粗体CO~2~CO2下标R^2^R2上标$E = mc^2$\(E = mc^2\) 行内公式（双美元符号为行间公式）[大鹏志](http://dapengde.</description>
    </item>
    
    <item>
      <title>不可挡的bookdown</title>
      <link>https://openr.netlify.com/zh/blog/inresistible-bookdown/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://openr.netlify.com/zh/blog/inresistible-bookdown/</guid>
      <description>最近，我打算把博客上关于R语言的帖子整理成一本书，希望弄得帅气一点，整齐一点，将来容易维护一点。涌进脑子的第一个念头是 \(\LaTeX\) ，第二个念头是想吐。
是的，虽然我推崇 \(\LaTeX\) ，觉得这个工具排出来的文档很漂亮，但自从弄完博士论文1 之后，除了帮别人备份一下博客2 、往论文里插几个公式和玩玩吉他谱3，我再也没碰过她。惰性开始代替折腾，我宁可点点鼠标写出一份不太美观的Word文档，也不想面对 \(\LaTeX\) 那让人头疼的代码。大概我是真上了岁数罢。
对于 \(\LaTeX\)，我想自己的内心深处是怀有恐惧的。她的美丽让我着迷，她的复杂令人生畏。
所以，这次整理博客，我决定在Word里做。用了这么多年，对Word的秉性我算是略知一二，从一开始就用主控文档和子文档的方式管理，以防单个文档太大而死机；从标题到R代码，我预先都设置好了样式以及样式的快捷键，方便调整格式；每写几句话，就左手抽筋一样ctrl+s一下，以防万一。其间，发现帖子里有些R代码要修改调试，我就咬牙忍着在RStudio和Word之间频繁拷贝粘贴的煎熬。反正换回 \(\LaTeX\) 也是一样想吐，既来之则安之，嫁鸡随鸡嫁狗随狗吧。
我天真地以为，这样就万无一失了。
有一天，我正在Word里改某篇帖子，改之前我留意了一下总页数是160多页。改了几个段落之后，我惊奇地发现，总页数成了220多页。再仔细找，发现有些代码区的文字无缘无故变成了乱码，一乱就新增几十页。进而测试发现，我正在好端端敲字，Word左下角的页数突然就刷刷地增加了，翻回去看，乱码已经被填进去了。试了好几次，都是这样。我甚至给文档权限设置为凭密码修订，仍然挡不住Word疯狂的脚步。
对着那自动呼呼上涨的页码，我想：认识十来年，想不到对你依然不了解。
\(\LaTeX\) 的倩影再度闪现在我脑海。她虽然复杂，但至少源文件是纯文本，不会胡来，不像Word这么没有底线。
为什么就没有个像Word那么界面简单，像 \(\LaTeX\) 那么源码单纯的两全其美方案呢？
“叮”的一声，脑子里冒出刚刚发布不久的bookdown(Xie 2016a)(Xie 2016b)。这是R语言的一个扩展包，专门用来写书，可以看作是R markdown的升级版。我的博客原文都是以markdown写成的，弄到bookdown里应当是顺理成章的事。只是大约因为上了岁数，我近几年对新工具越来越排斥，所以一直懒得尝试。这次被逼无奈，要不就试试吧。反正都是折腾，与其把精力花在让人心碎的Word里或让人心焦的 \(\LaTeX\) 里，还不如花在崭新的bookdown里。就算是有缺点，还能比Word和 \(\LaTeX\) 更不能忍么？
然后，刷！一晃十来天。春宵苦短日高起，从此君王不早朝。
这大半个月，我陶醉在bookdown的魅力里不可自拔。bookdown秉承拿来主义，把一大串工具链里的精华整合起来，让以前繁琐的步骤无比简化，怎一个爽快了得！她近乎完美地解决了我遇到的所有问题：纯文本操作，满足了我的控制欲；在导出完美的网页格式同时，还能导出为pdf和word文档，足够拿出来跟依赖Word的人交流；公式、脚注、交叉引用、目录、参考文献，功能齐全而不臃肿，格式标记简洁而优雅。我不再需要为Word的自以为是而抑郁，也不再需要为 \(\LaTeX\) 的纷繁复杂而烦恼了。
我用bookdown生成的书稿
一种亲切之美扑面而来，我感到无法抗拒无法阻挡。有了bookdown在手，写东西我还需要别的什么呢？想来想去，我不需要别的了。在Word和\(\LaTeX\) 之间摇摆了十来年，到头来才发现bookdown才是真爱。
不过，bookdown绝非完美。如果不了解rmarkdown(Allaire et al. 2017)，没见过 \(\LaTeX\) ，没听过pandoc，没用过knitr (Xie 2016c)(Xie 2015)(Xie 2014)，那么bookdown对新手来说，门槛仍然有点高。幸运的是，这几样工具我都用过，那么投入bookdown的怀抱就属于水到渠成了。即便如此，在使用初期仍然遇到了一些难以解决的问题，好在有bookdown的开发者益辉同学4 和其他同道中人热心地提供帮助，才能一路披荆斩棘，最后走上了幸福的康庄大道。
下面，我把我那些散落在各处的提问和解决方法汇总在这里。
编译起初我连bookdown的界面都没搞清楚，想编译却不知该点哪儿。益辉一直说build，build，我一直以为是菜单栏的build，后来才看到是在RStudio右上面板的build按钮。
bookdown是可以直接导出为word文档的。这么重要的功能，却隐藏得很深，在官方文档里都没有强调。导出方法是，在_output.yml里添加一行：
bookdown::word_document2: default 注意，default这个词是不能少的，不管它是不是默认。我也不知道为什么。
导出的word文档相当令人满意，参考文献的版式、图表的交叉引用都堪称完美。唯一不足之处，是公式的编号和交叉引用。bookdown的官方文档5给出的公式书写方案是，利用 \(\LaTeX\) 的公式环境来编号和引用，这一点在生成pdf时没问题，但生成word时，会发现别说编号，连公式本身都消失了。这大概是因为pandoc未能将公式环境正确转换的缘故。解决办法是，不使用公式环境，而使用行内公式（即公式前后有一个美元符号），公式前面用圆括号里加公式标签就可以了。例如，输入：
(@eq-mc) $E = mc^2$I like Eq. (@eq-mc) so much that I am falling love with her.</description>
    </item>
    
  </channel>
</rss>